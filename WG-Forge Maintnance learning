#учеба в WG-Forge Maintnance

Рабочий стол MacPro: /User/mbp13_2015/Desktop
Место хранения ключей на MAC: /Users/mbp13_2015/.ssh/id_rsa + 
на Windows  D:\.ssh  и C:\Users\uzer\.ssh
Your identification has been saved in C:\Users\uzer/.ssh/id_rsa.
Your public key has been saved in C:\Users\uzer/.ssh/id_rsa.pub.

cd ~ puttygen /User/mbp13_2015/Desktop/ageev_dmitry_wargaming_public_key.ppk  -O public-openssh -o id_rsa.pub 
ssh-rsa – то что сгенерировал Mac AAAAB3NzaC1yc2EAAAADAQABAAABAQDkox5idtc1W4xNrJa2y2RJnbe5OTvad1HcZ2OgRtqFklQQ2ig5hvwZtRcam188U50BSHKgR/WDPdu6Uef9FdZ6ryKDtzthYpROwziL2LtXVUL4L7Y5gRcm0bfsEoBplXY6iBGTIANFcuVJOKFopkpR4oz1VnqsNfa86OLkOeZs5wN8OJ7sQhiVCGVhJV8lKdX9ZVX0zKwO0Pwv9+Bd9QLcY3kd3lDczfMJmg+8tLpkxPJYR3qtFdP3e0K3n22WM2u6PTUIFnwNFDb4o/tGZGbMeKSD2jJtPRLp1KwACBWWHzKCkNGYpjbTvBds245ZKtGbLH2JAnbzLlrzGzG+VyrV ageev.dmitry@outlook.com

Вход на сервер: ssh centos@5.188.134.195
sudo su – команда для работы в терминале под пользователем root
sudo !! - запустить предыдущую команду с правами root
reboot - перезагрузка
yum install - Вариант инсталляции в системе Red Hat/centos:
yum install -y mariadb mariadb-server - установка mariadb mariadb-server
192.168.203.14/Zabbix
http://ithelp21.ru/ustanovka-zabbix-na-centos/
http://5.188.134.195/zabbix/setup.php
ithelp21 - пароль на пользователя Zabbix - DBPassword=ithelp21
3reBRakA – пароль для входа в CENTOS по SSH
вход в Zabbix: Admin – zabbix

поиск файла:
find /home/ -name "Docker*" -type f
apt update - индексирование / update
cd .. - перейти на уровень выше (выйти из каталога)
cd текущий каталог – войти в текущий каталог
ls – просмотреть содержимое текущего каталога
ls  -a – вывод скрытых файлов
ls -l – показывает все файлы на предмет исполняемые (х) или нет 
$ mv  - опции файл-источник файл-приемник – команда для переименования файла
touch – создание файла 
mkdit – создание папки/директории
yum install mc - для установки mc -редактора mc
mcedit – редактирование файла
subl файл - редактирование файла (2) в терминале MacPro
vim echo-script.sh  – редактирование файла (3)
i – после ее нажатия можно редактировать файл в vim
:w имя файла – сохранение файла в vim
:q enter – выход из vim
:q! enter – выход из vim без сохранения
:wq - выход из vim c сохранением
rm файл– удаляет файл
rm – r папка – удаляет папку
pwd # просмотреть путь к текущему файлу
whoami # имя пользователя
chmod +x script1.sh – команда  в терминале сделать скрипт script1.sh исполняемым
echo "имя пользователя $USER"  -  # имя пользователя mbp13_2015
clear – очистка терминала (и cnrl+L)
grep – “выдрезает” нужные вам строки из текстовых файлов, которые содержат указанный пользователем текст
df -h - информация о системных ресурсах
netstat -nlpt – отображает информацию, сетевые подключения, статистику интерфейсов
curl suip.biz/ip/ - для проверки своего IP в консоли
0.0.0.0:5000 – означает что порт 5000 смотрит в интернет (0000)
127.0.0.1:25 - означает что порт 25 смотрит на локальную сеть (127.0.0.1)
Для открытия порта 10050:
iptables -A INPUT -i eth0 -p tcp --dport 10050 -j ACCEPT
iptables -A INPUT -i eth0 -p udp --dport 10050 -j ACCEPT
lsblk – показывает диски
blkid – для просмотра UUID
fdisk -l
df -h  - #Disk Free Space #  -h for human readable value
ps aux - #List Running Processes
echo "Home for the current user is: $HOME" - вывести домашнюю директорию текущего пользователя


Скрипты на BASH(Virtual Studio Code): 
cd /users/mbp13_2015/Projects/Bash_scripts
После создания скрипта в BASH его нужно сделать исполняемым: 
chmod +x script1.sh – команда  в терминале сделать скрипт script1.sh исполняемым
./ script1.sh  - запуск скрипта в терминале
Echo “…” – вывод инфы на экран терминала
echo "I have \$1 in my pocket" - обратная косая черта, перед знаком доллара даст возм рывести на экран знак $
#I have $1 in my pocket
Существуют два типа переменных, которые можно использовать в bash-скриптах:
- Переменные среды ($HOME и т.д.)
- Пользовательские переменные:
#!/bin/bash
# testing variables
grade=5
person="Adam"
echo "$person is a good boy, he is in grade $grade" 
#Adam is a good boy, he is in grade 5

Команду нужно заключить в два таких значка: обратного апострофа «`»:
mydir=`pwd`
При втором подходе c помощью конструкции $() то же самое записывают так:
mydir=$(pwd)
А скрипт, в итоге, может выглядеть так:
#!/bin/bash
mydir=$(pwd)
echo $mydir

if [ …. ] then …elif … else … fi
if [пробел  выражение/сравнение пробел]
больше: -gt
больше или равно: -ge
равно: -eq
меньше: -lt
меньше или равно: -le
не равно : -ne
цикл for в bash:
for … in … do … done
for ((i=1; i<=10; i++)) do … done
IFS=$”\n” – новая строка при чтение в цикле for 

ncat -l 5000 --keep-open --exec "/bin/cat" 
ncat 5.188.134.195 5000 - для проверки полученного результата echo-сервиса с другого комапа
https://kali.tools/?p=4578 - всё про ncat на русском с примерами
yum install nmap - инсталяция ncat в centos
Примеры запуска Ncat
Подключение к example.org используя протокол TCP на порту 8080:
ncat example.org 8080
Прослушивать входящие соединения используя протокол TCP на порту 8080:
ncat -l 8080
Перенаправить TCP порт 8080 на локальной машине на хост на порт 80:
ncat --sh-exec "ncat example.org 80" -l 8080 --keep-open
Прослушивать порт 8081 и прикрепить /bin/bash для исполнения переданных команд:
ncat --exec "/bin/bash" -l 8081 --keep-open
Привязать шелл (оболочку) к TCP порту 8081, ограничить доступ к хостам из локальной сети и ограничить максимальное число одновременных подключений на тремя:
ncat --exec "/bin/bash" --max-conns 3 --allow 192.168.0.0/24 -l 8081 --keep-open
Подключиться к smtphost:25 через сервер SOCKS4 на порту 1080:
ncat --proxy socks4host --proxy-type socks4 --proxy-auth joe smtphost 25
Подключиться к smtphost:25 через сервер SOCKS5 на порту 1080:
ncat --proxy socks5host --proxy-type socks5 --proxy-auth joe:secret smtphost 25
Создать HTTP прокси сервер на localhost на порту 8888:
ncat -l --proxy-type http localhost 8888
Отправить файл через TCP порт 9899 с host2 (клиент) на host1 (сервер):
HOST1$ ncat -l 9899 > outputfile
HOST2$ ncat HOST1 9899 < inputfile
Отправить в другом направлении, превратив Ncat в сервер «одного файла»:
HOST1$ ncat -l 9899 < inputfile
HOST2$ ncat HOST1 9899 > outputfile

Python3 скрипты: /usr/local/bin/charm
Python3 проекты: /Users/mbp13_2015/PycharmProjects/Lesson1
заметки о Python - в word на рабочем столе Windows
в Linux для того, чтобы попробовать код на работоспособность достаточно в консоли ввести команду python и сам код.

sudo scutil --set HostName myMacPro – переименовать пользователя в терминале)

3 информационных канала: “стандартный ввод” (STDIN), “стандартный вывод” (STDOUT) и “стандартная ошибка” (STDERR)
символ “>” используется для замены содержимого файла, 
а “>>” — для добавления данных в его конец
символ "|" - для того чтобы связать канал STDOUT одной команды с каналом STDIN другой

chsh -s /bin/bash - включение bash в качестве shell 
chsh -s /bin/zsh - включение zsh в качестве shell 

sudo apt-get install tree -y #запустит команду tree в Bash
sudo ln -s /Appl
ications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl
# устанока команды subl в консоль BASH
 

 виртуализация VirtualBox + vagrant
 установить VirtualBox + vagrant на Mac 
 зайти в папку cd ~/wgforge2019_virtualization/
 ввести команду vagrant up
 vagrant ssh
попадаем в vagrant@wgforge2019:~$  
docker ps - показывает запущенные контейнеры в доккере
docker ps -a - показывает остановленные контейнеры в доккере
docker stop 59f4de5169dd - остановить контейнер в доккере
docker rm 59f4de5169dd - удалить контейнер в доккере
docker images - показывает images контейнеров в доккере - он не удаляется


FROM debian

RUN apt-get update && apt-get install -y python
RUN apt-get update && apt-get install -y nmap

ADD client.py /client.py

CMD ncat -l 5000 -k --exec /bin/cat
CMD ["/usr/bin/python","/client.py"]

version: '3'
services:
  apache2:
    build: ~/examples/docker/
    image: apache2.4-php7.0:latest
    ports:
      - "80:80"
    volumes:
      - '/home/vagrant/dokuwiki/:/var/www/'


restart: always
http://localhost:8080  - мой localhost:8080 

find / -type f -size +1G - для поиска большого обема файлов

ip a - для просмотра своего IP
systemctl start mariadb - для запуска mariadb
systemctl status mariadb - для просмотра статуса mariadb


select count(*) from title;
describe title;